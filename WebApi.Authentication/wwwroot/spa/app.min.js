(function () {
    'use strict';

    config.$inject = ['$routeProvider', '$locationProvider', '$logProvider'];
    run.$inject = ['$rootScope', '$location', 'authService'];

    var app = angular.module('app', ['ngRoute', 'ngResource', 'LocalStorageModule']);
    app.config(config);
    app.run(run);

    /**
     * Application run entry point, listen for main events
     */
    function run($rootScope, $location, authService) {
        //$rootScope.$on("$routeChangeStart", function (evt, to, from) {
        //    if (to.authorize === true) {
        //        if (!authService.authentication.isAuthenticated) {
        //            $location.path("/");
        //        }
        //    }
        //});

        //$rootScope.$on("$routeChangeError", function (evt, to, from, error) {
        //    if (error instanceof AuthorizationError) {
        //        $location.path("/login").search("returnTo", to.originalPath);
        //    }
        //});

        //$(document).ready(function () {
        //    $('[data-toggle=offcanvas]').click(function () {
        //        $('.row-offcanvas').toggleClass('active');
        //    });
        //});
    }

    /**
     * Application configuration entry point to configure routing.
     */
    function config($routeProvider, $locationProvider, $logProvider) {
        $routeProvider
        .when('/', {
            templateUrl: '/spa/home/home.html'
        })
        .when('/register', {
            templateUrl: '/spa/authentication/register.html',
            controller: 'AuthenticaitonCtrl',
            controllerAs: 'authCtrl'
        })
        .when('/login', {
            templateUrl: '/spa/authentication/login.html',
            controller: 'AuthenticaitonCtrl',
            controllerAs: 'authCtrl'
        })
        .when('/dashboard', {
            templateUrl: '/spa/dashboard/dashboard.html',
            controller: 'AuthenticaitonCtrl',
            controllerAs: 'authCtrl'
        })
        .otherwise({
            redirectTo: "/"
        });
        //GoogleMapApi.configure({
        //    //    key: 'your api key',
        //    v: '3.17',
        //    libraries: 'places'
        //});

        $locationProvider.html5Mode(true);

        $logProvider.debugEnabled(true);

      
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .controller('AuthenticaitonCtrl', AuthenticaitonCtrl);


    AuthenticaitonCtrl.$inject = ['$location','$log', '$scope', 'authService'];

    function AuthenticaitonCtrl($location, $log, $scope, authService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'registerController';
        $log.debug("Just started register controller!");

        vm.email = null;
        vm.password = null;
        vm.errorMessage = null;

        vm.hasAuthenticationError = false;

        function registerCommand(email, password) {
            // Set default GUID for ID to empty
           // var id = "00000000-0000-0000-0000-000000000000";

            authService.register(email, password).then(function (status) {
                $log.debug("Signed up user " + vm.email + " status is " + status.status);
                //$routeParams.redirect will have the route
                //they were trying to go to initially                
                vm.hasAuthenticationError = false;
                // Save the credentials

                // Redirect the path to the user dashboard
                $location.path('/login');

            }, function (error) {
                $log.error("Registration failed " + error.status);
                vm.hasAuthenticationError = true;
            });
        }
        /**
         * @desc Send login credentials
         */
        function loginCommand(email, password) {
            // Set default GUID for ID to empty
          //  var id = "00000000-0000-0000-0000-000000000000";

            authService.login(email, password).then(function (status) {
                $log.debug("Logged in user " + email + " status is " + status.status);
                vm.hasAuthenticationError = false;

                var isAuthenticated = authService.isUserAuthenticated();

                //$routeParams.redirect will have the route
                //they were trying to go to initially
                if (status.status != 200) {
                    //notificationService.displayError("Authenication failed.");
                    vm.hasAuthenticationError = true;
                    return;
                }

                //if (status && $routeParams && $routeParams.redirect) {
                //    path = path + $routeParams.redirect;
                //}
                $location.path('/dashboard');
            });
        }

        function logoutUser() {
            authService.logout();
            $location.path('/');

        }

        // Check if the user has been authenticated
        vm.isUserLoggedIn = function () {
            return authService.isUserAuthenticated();
        }

        // Send login registration details
        vm.signup = function () {
            registerCommand(vm.email, vm.password);
        }

        // Send login registration details
        vm.login = function () {
            loginCommand(vm.email, vm.password);
        }

        vm.logout = function () {
            logoutUser();
        }
    }
})();


(function () {
    'use strict';

    angular
        .module('app')
        .factory('authService', authService);

    authService.$inject = ['$http', '$log', 'localStorageService'];

    // Use web api to communicate with server login authenitcaion
    function authService($http, $log, localStorageService) {

        var serviceBase = '/api/account/';

        var authService = {
            isUserAuthenticated,
            register: register,
            registrationFailed: registrationFailed,
            login: login,
            logout: logout,
            getToken: getToken
        };

        return authService;

        /**
         * @description
         */
        function register(email, password) {
            $log.debug("Register user name " + email);
            var data = {
                Email: email,
                Password: password
            };
            return $http.post(serviceBase + 'register', data)
                .then(function (response) {
                    storeUser(email, password);
                    $log.debug("Response status is " + response.status);
                    return response;
                },
            function (responseHeaders) {
                $log.debug("Failed sign up of user name " + email);
                logout();
                return responseHeaders;
            });
        };


        /**
          * @description
          */
        function registrationFailed(response) {
            $log.debug("Registration failed");
            //notificationService.displayError('Registration failed. Try again.');
        }

        /**
         * @description
         */
        // AuthenticationService in user with credentials
        function login(email, password) {
            $log.debug("Login with email" + email);
            var loginData = {
                grant_type: 'password',
                username: email,
                password: password
            };

            // use $.param jQuery function to serialize data from JSON 
            var dataSerialized = $.param(loginData);

            return $http({
                url : '/Token', 
                method : 'POST',
                data: dataSerialized,
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
                }
            })
            .then(function (response) {
                $log.debug("Response is " + response);
                storeUser(email, password, response.data.access_token);
                return response;
            },
            function (responseHeaders) {
                $log.debug("Failed login with email " + email + ". Response was " + responseHeaders);
                logout();
                return responseHeaders;
            });
        };

        /**
         * @description Logout
         */
        function logout() {
            clearCache();
        };

        /**
         * @description Check to see if the user is logged in
         */
        function isUserAuthenticated() {
            var authData = localStorageService.get('authorizationData');
            var authData1 = localStorageService.get('authorizationData1');
            return authData !== null;
        }

        /**
         * @description Get access token if it exists
         */
        function getToken() {
            var token = null;
            var authData = localStorageService.get('authorizationData');
            if(authData !== null)
            {
                token = authData.Token;
            }
            return token;
        }

        /**
         * @description Store login credentials into local storage
         */
        function storeUser(email, password, tokenKey) {

            localStorageService.set('authorizationData', { Email: email, Token: tokenKey });
        }

        /**
         * @description Remove login credentials from local storage
         */
        function clearCache() {
            localStorageService.remove('authorizationData');
        };
    };
})();